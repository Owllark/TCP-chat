package main

import (
	"fmt"
	"net"
	"strconv"
	"os/exec"
	"strings"
)

func isPortInUse(port int) bool {
	cmd := exec.Command("cmd", "/C", "netstat -a -n -o")
	out, err := cmd.Output()
	if err != nil {
		fmt.Println(err)
		return false
	}

	lines := strings.Split(string(out), "\n")
	for _, line := range lines {
		if strings.Contains(line, fmt.Sprintf(":%d", port)) && strings.Contains(line, "LISTENING") {
			return true
		}
	}

	return false
}


func main() {
	var port int
	fmt.Println("Введите номер порта:")
	fmt.Scan(&port)
	for isPortInUse(port)  {
		fmt.Printf("Порт %d уже используется\n", port)
		fmt.Println("Введите номер порта:")
		fmt.Scan(&port)
	}
	socket, err := net.Listen("tcp", ":" + strconv.Itoa(port))
	if err != nil {
        fmt.Printf("Ошибка при прослушивании порта: %s\n", err)
    }
	defer socket.Close()
	fmt.Println("Сервер запущен и слушает порт " + strconv.Itoa(port))

	connections := make(map[net.Conn]bool)
	messages := make(chan string)

	go func() {
		for {
			message := <-messages
			for conn := range connections {
				_, err := fmt.Fprintf(conn, message+"\n")
				if err != nil {
					delete(connections, conn)
				}
			}
		}
	}()

	for {
		conn, err := socket.Accept()
		if err != nil {
			fmt.Println(err)
			continue
		}
		connections[conn] = true
		fmt.Println("Подключение нового клиента:", conn.RemoteAddr())
		go func(conn net.Conn) {
			for {
				message := make([]byte, 1024)
				length, err := conn.Read(message)
				if err != nil {
					fmt.Println("Клиент отключился:", conn.RemoteAddr())
					delete(connections, conn)
					return
				}
				if length > 0 {
					messages <- fmt.Sprintf("%s: %s", conn.RemoteAddr(), message[:length])
				}
			}
		}(conn)
	}

package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
)

func main() {
	
	var address string
	var port string
	fmt.Println("Введите ip адрес:")
	fmt.Scan(&address)
	fmt.Println("Введите номер порта:")
	fmt.Scan(&port)
	conn, err := net.Dial("tcp", address+":"+port)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer conn.Close()
	fmt.Println("Подключение к серверу успешно установлено.")

	go func() {
		for {
			message, err := bufio.NewReader(conn).ReadString('\n')
			if err != nil {
				fmt.Println(err)
				return
			}
			fmt.Print(message)
		}
	}()

	for {
		reader := bufio.NewReader(os.Stdin)
		fmt.Print("Введите сообщение: ")
		text, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println(err)
			return
		}
		_, err = fmt.Fprintf(conn, text)
		if err != nil {
			fmt.Println(err)
			return
		}
	}
}

}
